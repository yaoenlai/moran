<?php
/*
 * 定时脚本,针对新用户打招呼脚本
 * @author yyl
 * @email 944677073@qq.com
 * */
namespace Love\Shell;
use Love\Shell\Shell;
class HiShell extends Shell {
    private $time;
    private $star;
    private $end;
    private $cronSayHi;
    private $ysAggId = 1;
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->cronSayHi = D('User/MessagePush');
        //运行方式: php shell.php game/Calculate/CalculateAggRecord    &&  php shell.php game/Calculate/CalculateAggRecord/time/2017-01-01,2017-01-29
        $this->time = I('get.time');
        if(!empty($this->time)){
            if(strpos($this->time,',') === false){
                $this->star = strtotime($this->time);
                $this->end = strtotime(date('Y-m-d 23:59:59',strtotime($this->time)));
            }else{
                $time = explode(',',$this->time);
                $this->star = strtotime($time[0]);
                $this->end = strtotime($time[1].' 23:59:59');
            }
        }
    }
    /**
     * 三分钟未打招呼,系统主动
     *登录平台系统主动发信息，三分钟无响应再次发送，3次之后延长至10分钟一次
     */
    //运行方式: php shell.php Love/Hi/AutoCall 
    public function AutoCall(){
        $Model = D('User/LoginLog');
         $map['create_time'] = array('EGT',time()-180);//检测3分钟内登录的用户
        $result = $Model->field('uid')->where($map)->select();//可以添加已经打招呼的标识字段1,打过招呼，0未打招呼
        if ($result) {//检测3分钟内登录的用户
           foreach ($result as $key => $value) {
               $from = 'admin';//D('Admin/User')->where('id = '.$value['uid'])->getField('username');
               //检测未打招呼的fellow
               if($value['say'] == 0){
                  $Model = D('User/Follow');
                  $follows = $Model->field('a.uid,a.follow_uid,b.gender')//获取性别,1,男性,2女性
                            ->alias('a')
                            ->join('left join ___USER_FOLLOW__ as b on a.uid = b.uid')
                            ->where('a.uid = '.$value['uid'])
                            ->select();//检测所有的用户
                  foreach ($follows as $key_in => $value_in) {//下次修改方向，不循环用户，循环生成消息，批量发送给用户，减少接口访问次数
                    $target = D('Admin/User')->where('id = '.$value_in['follow_uid'])->getField('username');
                    //发送消息，消息；类型随机
                    echo 'from:'.$from."\r\n";
                    echo 'target:'.$target."\r\n";
                    $rel = $this->RandSendMsg($from,array($target),$value_in['gender']);
                    if ($rel['error']) {
                    echo $info['error_description'].$i."\r\n";
                    continue;
                    file_put_contents('tmp/log/'.CONTROLLER_NAME.'/'.ACTION_NAME.'.log','消息发送失败,可能是网络问题'.$rel['error'].PHP_EOL);
                    break;
                    }
                  }
               }else{
                  continue;
               }
           }
        }
    }
    /**
     * 循环发送消息
     * @from 发送者
     * @target接受者
     * @gender 性别
     * @target_type = 'users';给什么用户类型发送消息
     *
     */
    public function RandSendMsg($from,$target,$gender,$target_type = 'users',$msg = true){
        $code =4;// mt_rand(0,3);
        if ($msg) {//是机器人
            $filename = 'testfilename';
            $filePath = __FILE__;//文件的地址
        }else{
            $filename = 'testfilename';
            $filePath = __FILE__;//文件的地址
        }
        switch ($code) {
            case 1://发图片消息
                // 数据拼接
                $ext['hello'] = 'Say Hello';
                return $this->huanxin->sendImage($filePath,$from,$target_type,$target,$filename,$ext);
                break;
            case 2://发送语音信息
                $length = 10;//声音长度是10秒
                $ext['Audio'] = 'Audio';
                return $this->huanxin->sendAudio($filePath,$from,$target_type,$target,$filename,$length,$ext);
                break;
            case 3://发视频消息
                $length = 10;//视频播放长度
                $ext['Video'] = 'Video';
                $thumb = '67279b20-7f69-11e4-8eee-21d3334b3a97';//先使用固定的，测试一下
                $thumb_secret = 'ZyebKn9pEeSSfY03ROk7ND24zUf74s7HpPN1oMV-1JxN2O2I';//先使用固定的，测试一下
                return $this->huanxin->sendVedio($filePath,$from,$target_type,$target,$filename,$length,$thumb,$thumb_secret,$ext);
                break;
            default://发送文本信息
                if ($msg) {//是机器人
                    $Model = D('Love/Greet');//招呼信息
                    $content = $Model->getGreetingRandom(1,$gender);
                }else{//不是机器人
                    $content = 'msg';
                }
                $ext['Text'] = 'Text';
                return $this->huanxin->sendText($from,$target_type,$target,$content,$ext);
                break;
        }
    }
    /**
     * php shell.php Love/Hi/huanxinregister
     * [huanxin 简单的环信用户批量注册]
     * @return [type] [description]
     */

   public function huanxinregister(){
        $model = D('Admin/User');
        $userinfo = $model->field('id,username,password,nickname')->select();
        if ($userinfo) {
            foreach ($userinfo as $key => $value) {
                $username =  $value['username'];
                if ($username == 'admin') {
                    continue;
                }
                $password =  $value['password'];
                $nickname =  $value['nickname'];
                $info = $this->huanxin->createUser($username,$password,$nickname);
                if ($info['error']) {
                    echo $info['error_description'].$i."\r\n";
                    continue;
                }
                $model->hxuuid = $info['entities'][0]['uuid'];
                $rel = $model->where('id = '.$value['id'])->save();
                if ($rel) {
                     echo '新增用户:'.$username.'已经注册到环信，环信uuid:'.$info['entities'][0]['uuid']."\r\n";
                }
            }
        }
    }
    /**
     * [GetFileInfo 获取资源信息，用来推送给用户，根据发送用户是不是机器人选择]
     */
    public function GetFileInfo($from = 'admin'){
        if ($from == 'admin') {//根据是不是机器人使用不同的方法获取资源信息
            return ;
        }else{
            return ;
        }
    }
    /**
     * 正常打招呼
     * 总数的前10个，每三分钟一个，10个以后的
     */
    public function  NormalCall(){
        $Model = D('User/LoginLog');
        // $map['create_time'] = array('EGT',time()-180);//检测3分钟内登录的用户
        $result = $Model->field('uid')->where($map)->select();//可以添加已经打招呼的标识字段1,打过招呼，0未打招呼
        if ($result) {//检测3分钟内登录的用户
           foreach ($result as $key => $value) {
               $from = 'admin';//D('Admin/User')->where('id = '.$value['uid'])->getField('username');
               //检测未打招呼的fellow
               if($value['say'] == 0){//检测打过招呼的
                  $Model = D('User/Follow');
                  $follows = $Model->field('a.uid,a.follow_uid,b.gender')//获取性别,1,男性,2女性
                            ->alias('a')
                            ->join('left join ue_love_person as b on a.uid = b.uid')
                            ->where('a.uid = '.$value['uid'])
                            ->order('a.id desc')
                            ->limit(10)
                            ->select();//检测所有的用户
                  foreach ($follows as $key_in => $value_in) {//下次修改方向，不循环用户，循环生成消息，批量发送给用户，减少接口访问次数
                    $target = D('Admin/User')->where('id = '.$value_in['follow_uid'])->getField('username');
                    //发送消息，消息；类型随机
                    echo 'from:'.$from."\r\n";
                    echo 'target:'.$target."\r\n";
                    $rel = $this->RandSendMsg($from,array($target),$value_in['gender']);
                    if ($rel['error']) {
                    echo $info['error_description'].$i."\r\n";
                    continue;
                    file_put_contents('tmp/log/'.CONTROLLER_NAME.'/'.ACTION_NAME.'.log','消息发送失败,可能是网络问题'.$rel['error'].PHP_EOL);
                    break;
                    }
                  }
               }else{
                  continue;
               }
           }
        }

    }
    /**
     * 每间隔5分钟一个招呼
     */
    public function Every5MinsCall(){

    }
    /*
     *
     * agggameanalysisforthirduserevery5min
     * 脚本功能说明：聚合模块统计游戏纬度的统计;
     * 添加 聚合统计 游戏纬度数据 五分钟运行一次
     * 运行方法: php shell /Aggregation/Calculate/CalculateGameRecord
     * 调试方法: php shell /Aggregation/Calculate/CalculateGameRecord/time/2017-01-01
     *          php shell /Aggregation/Calculate/CalculateGameRecord/time/2017-01-01,2017-01-02
     * */
    public function CalculateGameRecord(){
        $startMicroTime = microtime(true);
        echo microDate("y-m-d H:i:s.x"). " 开始运行 聚合统计 -> 游戏纬度 数据...\r\n";
        if(intval(date('H',time())) === 2 ){
            $starTime = strtotime(date('Y-m-d',strtotime('-1 day')));
            $endTime = strtotime(date('Y-m-d 23:59:59',strtotime('-1 day')));
        }else{
            $starTime = ($this->star) ? $this->star : strtotime(date('Y-m-d 00:00:00',time()));
            $endTime = ($this->end) ? $this->end : time();
        }
        $confModel = D('Aggregation/Conf')->field('gid,uid,type')->where(array('status'=>1))->group('gid')->select();
        for($i = $starTime;$i <= $endTime;$i+=86400){
            $start = strtotime(date('Y-m-d 00:00:00',$i));//设置SQL条件查询的开始时间
            $end = strtotime(date('Y-m-d 23:59:59',$i));//设置SQL条件查询的结束时间
            echo microDate("y-m-d H:i:s.x"). " 开始验证 渠道配置 数据是否为空... \r\n";
            $html = '';
            if(!empty($confModel)){
                echo microDate("y-m-d H:i:s.x")." 开始循环 渠道配置 数据....\r\n";
                foreach($confModel as $key => $val){
                    $where['create_time'] = array('between',array($start,$end));
                    $where['uid'] = $val['uid'];
                    $where['type'] = $val['type'];
                    $where['gid'] = $val['gid'];
                    $where['status'] = 1;
                    //计算游戏的总收入
                    $html =  "详细信息:".date('Y-m-d H:i:s',$start)." 至 ".date('Y-m-d H:i:s',$end);
                    $totalMoney = D('Aggregation/Pay')->field(array('SUM(total_money)'=>'sum_money'))->where($where)->find();
                    $totalMoney = isset($totalMoney['sum_money']) ? $totalMoney['sum_money'] : 0;
                    $html .= "  游戏总收入:%s,";
                    //计算当前时间区间内总的付费用户数目开始
                    $consumeMoney = D('Aggregation/Pay')->field('guid')->where($where)->group('guid')->select();unset($where['status']);
                    $consumeNum = count($consumeMoney['guid']);//
                    $html .= "付费用户:%s,";

                    //计算新增用户 && 当前游戏计算总用户数目
                    $userNum = D('Aggregation/User')->field(array('count(id)'=>'user_num'))->where($where)->find();
                    $userNum = isset($userNum['user_num']) ? $userNum['user_num'] : 0;
                    $html .= "新增用户:%s,";
                    unset($where['create_time']);
                    if(is_null($where['create_time']))
                        $where['login_time'] = array('between',array($start,$end));

                    //计算活跃用户 && 计算某个游戏在某段时间注册的数量
                    $loginModel = D('Aggregation/LoginLog')->field('guid')->where($where)->group('guid')->select();
                    $loginNum = count($loginModel['guid']);
                    $html .= "活跃用户:%s,";
                    unset($where);
                    $dev['dev.create_time'] = array('between',array($start,$end));
                    $dev['user.uid'] = $val['uid'];
                    $dev['user.type'] = $val['type'];
                    $dev['user.gid'] = $val['gid'];
                    //计算某款游戏下，某段时间注册的人数
                    $deviceNum = D('Aggregation/User')->field(array('count(dev.id)'=>'device_num'))->alias('user')->join('__ADMIN_DEVICE__ dev on user.did = dev.id')->where($dev)->find();unset($dev);
                    $deviceNum = isset($deviceNum['device_num']) ? $deviceNum['device_num'] : 0;
                    $html .= "注册用户:%s,";
                    $aggWhere['a.create_time'] = array('between',array($start,$end));
                    $aggWhere['b.uid'] = $val['uid'];
                    $aggWhere['b.type'] = $val['type'];
                    $aggWhere['b.gid'] = $val['gid'];
                    //计算所有渠道的首次付费的用户人数
                    $aggConsume = M('aggregation_guidtogid')->alias('a')->field('guid')->join('__AGGREGATION_USER__ b on a.guid = b.id')->where($aggWhere)->count();
                    $html .= "首次付费用户:%s";
                    $appu = 0;
                    $payrate = 0;
                    $arppu = 0;
                    //$aggConsume
                    if($loginNum > 0 && $totalMoney > 0){
                        $appu = $totalMoney / $loginNum; // 游戏总收入/活跃用户
                    }
                    if($consumeNum > 0 && $loginNum > 0){
                        $payrate = $consumeNum/$loginNum; // 付费总数/活跃用户
                    }
                    if($consumeNum > 0 && $totalMoney > 0){
                        $arppu = round($totalMoney/$consumeNum,2);   //游戏总收入/ 付费总数
                    }
                    $saveWhere['type'] = $val['type'];
                    $saveWhere['uid'] = $val['uid'];
                    $saveWhere['gid'] = $val['gid'];
                    $saveWhere['aggid'] = 0;
                    $saveWhere['year'] = date('Y',$i);
                    $saveWhere['month'] = date('m',$i);
                    $saveWhere['day'] = date('d',$i);
                    $saveWhere['week'] = date('W',$i);
                    $data['new_users'] = $userNum;//
                    $data['new_activeusers'] = isset($loginNum) ? $loginNum :0;
                    $data['new_devices'] = $deviceNum;
                    $data['rate_2'] = 0;
                    $data['rate_7'] = 0;
                    $data['rate_30'] = 0;
                    $data['payrate'] = isset($payrate) ? $payrate : 0;
                    $data['payusers'] = isset($consumeNum) ? $consumeNum : 0;
                    $data['new_payusers'] = isset($aggConsume) ? $aggConsume : 0;
                    $data['paytotal'] = $totalMoney;
                    $data['new_paytotal'] = 0;
                    $data['ARPU'] =  isset($appu) ? $appu : 0;
                    $data['ARPPU'] = $arppu;
                    $data['create_time'] = strtotime(date('Y-m-d 00:00:05',$start));
                    $ret = D('Game/CronAggAnalysis')->where($saveWhere)->save($data);
                    if($ret === false){
                        echo "数据更新失败,查询条件:[uid:".$val['uid']."|gid:".$val['gid']."],错误原因:".D('Game/CronAggAnalysis')->getError();
                        file_put_contents('d:/wamp/www/php/game/Application/Game/'.ACTION_NAME.'-'.date('Y-m-d').'.txt',microDate("y-m-d H:i:s.x").' '."数据更新失败,查询条件:[uid:".$val['uid']."|gid:".$val['gid']."],错误原因:".D('Game/CronAggAnalysis')->getError()."\r\n",FILE_APPEND);
                    }else{
                        echo  microDate("y-m-d H:i:s.x").' '."数据更新成功,查询条件:[uid:".$val['uid']."|gid:".$val['gid']."]\r\n";
                        echo  microDate("y-m-d H:i:s.x").' '.sprintf($html,number_format($totalMoney/100,2),$consumeNum,$userNum,$loginNum,$deviceNum,$aggConsume)."\r\n";
                    }
                }

            }else{
                echo microDate("y-m-d H:i:s.x")." 验证失败..\r\n";
            }
        }
        $endMicroTime = microtime(true);
        $times = $endMicroTime - $startMicroTime;
        echo "脚本运行总时长:".$times;
    }

    /*
     * 5 * * * * gameanalysisforthirduserevery5min
     * 脚本功能说明：聚合模块渠道游戏维度统计;
     * 聚合统计 ->渠道纬度  五分钟运行一次
     * 运行方法: php shell /Aggregation/Calculate/CalculateAggRecord
     * 调试方法: php shell /Aggregation/Calculate/CalculateAggRecord/time/2017-01-01
     *          php shell /Aggregation/Calculate/CalculateAggRecord/time/2017-01-01,2017-01-02
     * */
    public function CalculateAggRecord(){
        $startMicroTime = microtime(true);
        echo microDate("y-m-d H:i:s.x"). " 开始运行 聚合统计 -> 渠道纬度 数据...\r\n";
        if(intval(date('H',time())) === 2 ){
            $starTime = strtotime(date('Y-m-d',strtotime('-1 day')));
            $endTime = strtotime(date('Y-m-d 23:59:59',strtotime('-1 day')));
        }else{
            $starTime = ($this->star) ? $this->star : strtotime(date('Y-m-d 00:00:00',time()));
            $endTime = ($this->end) ? $this->end : time();
        }
        $confModel = D('Aggregation/Conf')->field('gid,uid,type,aggid')->where(array('status'=>1))->select();
        for($i = $starTime;$i <= $endTime;$i+=86400){
            $start = strtotime(date('Y-m-d 00:00:00',$i));//设置SQL条件查询的开始时间
            $end = strtotime(date('Y-m-d 23:59:59',$i));//设置SQL条件查询的结束时间
            echo microDate("y-m-d H:i:s.x"). " 开始验证 渠道配置 数据是否为空... \r\n";
            $html = '';
            if(!empty($confModel)){
                echo microDate("y-m-d H:i:s.x")." 开始循环 渠道配置 数据....\r\n";
                foreach($confModel as $key => $val){
                    $where['create_time'] = array('between',array($start,$end));
                    $where['uid'] = $val['uid'];
                    $where['type'] = $val['type'];
                    $where['gid'] = $val['gid'];
                    $where['aggid'] = $val['aggid'];
                    $where['status'] = 1;
                    //计算游戏的总收入
                    $html =  "详细信息:".date('Y-m-d H:i:s',$start)." 至 ".date('Y-m-d H:i:s',$end);
                    $totalMoney = D('Aggregation/Pay')->field(array('SUM(total_money)'=>'sum_money'))->where($where)->find();
                    $totalMoney = isset($totalMoney['sum_money']) ? $totalMoney['sum_money'] : 0;
                    $html .= "  游戏总收入:%s,";
                    //计算当前时间区间内总的付费用户数目开始
                    $consumeMoney = D('Aggregation/Pay')->field('guid')->where($where)->group('guid')->select();
                    $consumeNum = count($consumeMoney['guid']);unset($where['status']);//下面的sql使用相同的条件。单不需要status,节省不必要的代码
                    $html .= "付费用户:%s,";

                    //计算新增用户 && 当前游戏计算总用户数目
                    $userNum = D('Aggregation/User')->field(array('count(id)'=>'user_num'))->where($where)->find();
                    $userNum = isset($userNum['user_num']) ? $userNum['user_num'] : 0;
                    $html .= "新增用户:%s,";
                    unset($where['create_time']);
                    if(is_null($where['create_time']))
                        $where['login_time'] = array('between',array($start,$end));

                    //计算活跃用户 && 计算某个游戏在某段时间注册的数量
                    $loginModel = D('Aggregation/LoginLog')->field('guid')->where($where)->group('guid')->select();
                    $loginNum = count($loginModel['guid']);
                    $html .= "活跃用户:%s,";
                    unset($where);
                    $dev['dev.create_time'] = array('between',array($start,$end));
                    $dev['user.uid'] = $val['uid'];
                    $dev['user.type'] = $val['type'];
                    $dev['user.gid'] = $val['gid'];
                    $dev['user.aggid'] = $val['aggid'];
                    //计算某款游戏下，某段时间注册的人数
                    $deviceNum = D('Aggregation/User')->field(array('count(dev.id)'=>'device_num'))->alias('user')->join('__ADMIN_DEVICE__ dev on user.did = dev.id')->where($dev)->find();unset($dev);
                    $deviceNum = isset($deviceNum['device_num']) ? $deviceNum['device_num'] : 0;
                    $html .= "注册用户:%s,";
                    $aggWhere['a.create_time'] = array('between',array($start,$end));
                    $aggWhere['b.uid'] = $val['uid'];
                    $aggWhere['b.type'] = $val['type'];
                    $aggWhere['b.gid'] = $val['gid'];
                    $aggWhere['b.aggid'] = $val['aggid'];
                    //计算所有渠道的首次付费的用户人数
                    $aggConsume = M('aggregation_guidtogid')->alias('a')->field('guid')->join('__AGGREGATION_USER__ b on a.guid = b.id')->where($aggWhere)->count();
                    $html .= "首次付费用户:%s";
                    $appu = 0;
                    $payrate = 0;
                    $arppu = 0;
                    //$aggConsume
                    if($loginNum > 0 && $totalMoney > 0){
                        $appu = $totalMoney / $loginNum; // 游戏总收入/活跃用户
                    }
                    if($consumeNum > 0 && $loginNum > 0){
                        $payrate = $consumeNum/$loginNum; // 付费总数/活跃用户
                    }
                    if($consumeNum > 0 && $totalMoney > 0){
                        $arppu = round($totalMoney/$consumeNum,2);   //游戏总收入/ 付费总数
                    }
                    $saveWhere['type'] = $val['type'];
                    $saveWhere['uid'] = $val['uid'];
                    $saveWhere['gid'] = $val['gid'];
                    $saveWhere['aggid'] = $val['aggid'];
                    $saveWhere['year'] = date('Y',$i);
                    $saveWhere['month'] = date('m',$i);
                    $saveWhere['day'] = date('d',$i);
                    $saveWhere['week'] = date('W',$i);
                    $data['new_users'] = $userNum;//
                    $data['new_activeusers'] = isset($loginNum) ? $loginNum :0;
                    $data['new_devices'] = $deviceNum;
                    $data['rate_2'] = 0;
                    $data['rate_7'] = 0;
                    $data['rate_30'] = 0;
                    $data['payrate'] = isset($payrate) ? $payrate : 0;
                    $data['payusers'] = isset($consumeNum) ? $consumeNum : 0;
                    $data['new_payusers'] = isset($aggConsume) ? $aggConsume : 0;
                    $data['paytotal'] = $totalMoney;
                    $data['new_paytotal'] = 0;
                    $data['ARPU'] =  isset($appu) ? $appu : 0;
                    $data['ARPPU'] = $arppu;
                    $data['create_time'] = strtotime(date('Y-m-d 00:00:05',$start));
                    $ret = D('Game/CronAggAnalysis')->where($saveWhere)->save($data);
                    if($ret === false){
                        echo "数据更新失败,查询条件:[uid:".$val['uid']."|gid:".$val['gid']."],错误原因:".D('Game/CronAggAnalysis')->getError();
                        file_put_contents('d:/wamp/www/php/game/Application/Game/'.ACTION_NAME.'-'.date('Y-m-d').'.txt',microDate("y-m-d H:i:s.x").' '."数据更新失败,查询条件:[uid:".$val['uid']."|gid:".$val['gid']."],错误原因:".D('Game/CronAggAnalysis')->getError()."\r\n",FILE_APPEND);
                    }else{
                        echo microDate("y-m-d H:i:s.x").' '."数据更新成功,查询条件:[uid:".$val['uid']."|gid:".$val['gid']."|aggid:".$val['aggid']."]\r\n";
                        echo microDate("y-m-d H:i:s.x").' '.sprintf($html,number_format($totalMoney/100,2),$consumeNum,$userNum,$loginNum,$deviceNum,$aggConsume)."\r\n";
                    }
                }

            }else{
                echo microDate("y-m-d H:i:s.x")." 验证失败..\r\n";
            }
        }
        $endMicroTime = microtime(true);
        $times = $endMicroTime - $startMicroTime;
        echo "脚本运行总时长:".$times;
    }

    /*
     * 5 * * * * gameanalysisforthirduserevery5min
     * 脚本功能说明：聚合模块渠道游戏维度统计;  勇士互娱数据
     * 聚合统计 ->渠道纬度  勇士互娱数据 五分钟运行一次
     * 运行方法: php shell /Aggregation/Calculate/CalculateYsAggRecord
     * 调试方法: php shell /Aggregation/Calculate/CalculateYsAggRecord/time/2017-01-01
     *          php shell /Aggregation/Calculate/CalculateYsAggRecord/time/2017-01-01,2017-01-02
     * */
    public function CalculateYsAggRecord(){
        $startMicroTime = microtime(true);
        echo microDate("y-m-d H:i:s.x"). " 开始运行 聚合统计 -> 渠道纬度 勇士互娱 数据...\r\n";
        if(intval(date('H',time())) === 2 ){
            $starTime = strtotime(date('Y-m-d',strtotime('-1 day')));
            $endTime = strtotime(date('Y-m-d 23:59:59',strtotime('-1 day')));
        }else{
            $starTime = ($this->star) ? $this->star : strtotime(date('Y-m-d 00:00:00',time()));
            $endTime = ($this->end) ? $this->end : time();
        }
        $confModel = D('Aggregation/Conf')->field('gid,uid,type,aggid')->where(array('status'=>1))->select();
        for($i = $starTime;$i <= $endTime;$i+=86400){
            $start = strtotime(date('Y-m-d 00:00:00',$i));//设置SQL条件查询的开始时间
            $end = strtotime(date('Y-m-d 23:59:59',$i));//设置SQL条件查询的结束时间
            echo microDate("y-m-d H:i:s.x"). " 开始验证 渠道配置 数据是否为空... \r\n";
            $html = '';
            if(!empty($confModel)){
                echo microDate("y-m-d H:i:s.x")." 开始循环 渠道配置 数据....\r\n";
                foreach($confModel as $key => $val){
                    $where['create_time'] = array('between',array($start,$end));
                    $where['uid'] = $val['uid'];
                    $where['type'] = $val['type'];
                    $where['gid'] = $val['gid'];
                    $where['aggid'] = $this->ysAggId;
                    $where['status'] = 1;
                    //计算游戏的总收入
                    $html =  "详细信息:".date('Y-m-d H:i:s',$start)." 至 ".date('Y-m-d H:i:s',$end);
                    $totalMoney = D('Aggregation/Pay')->field(array('SUM(total_money)'=>'sum_money'))->where($where)->find();
                    $totalMoney = isset($totalMoney['sum_money']) ? $totalMoney['sum_money'] : 0;
                    $html .= "  游戏总收入:%s,";
                    //计算当前时间区间内总的付费用户数目开始
                    $consumeMoney = D('Aggregation/Pay')->field('guid')->where($where)->group('guid')->select();unset($where['status']);
                    $consumeNum = count($consumeMoney['guid']);//
                    $html .= "付费用户:%s,";

                    //计算新增用户 && 当前游戏计算总用户数目
                    $userNum = D('Aggregation/User')->field(array('count(id)'=>'user_num'))->where($where)->find();
                    $userNum = isset($userNum['user_num']) ? $userNum['user_num'] : 0;
                    $html .= "新增用户:%s,";
                    unset($where['create_time']);
                    if(is_null($where['create_time']))
                        $where['login_time'] = array('between',array($start,$end));

                    //计算活跃用户 && 计算某个游戏在某段时间注册的数量
                    $loginModel = D('Aggregation/LoginLog')->field('guid')->where($where)->group('guid')->select();
                    $loginNum = count($loginModel['guid']);
                    $html .= "活跃用户:%s,";
                    unset($where);
                    $dev['dev.create_time'] = array('between',array($start,$end));
                    $dev['user.uid'] = $val['uid'];
                    $dev['user.type'] = $val['type'];
                    $dev['user.gid'] = $val['gid'];
                    $dev['user.aggid'] = $this->ysAggId;
                    //计算某款游戏下，某段时间注册的人数
                    $deviceNum = D('Aggregation/User')->field(array('count(dev.id)'=>'device_num'))->alias('user')->join('__ADMIN_DEVICE__ dev on user.did = dev.id')->where($dev)->find();unset($dev);
                    $deviceNum = isset($deviceNum['device_num']) ? $deviceNum['device_num'] : 0;
                    $html .= "注册用户:%s,";
                    $aggWhere['a.create_time'] = array('between',array($start,$end));
                    $aggWhere['b.uid'] = $val['uid'];
                    $aggWhere['b.type'] = $val['type'];
                    $aggWhere['b.gid'] = $val['gid'];
                    $aggWhere['b.aggid'] = $this->ysAggId;
                    //计算所有渠道的首次付费的用户人数
                    $aggConsume = M('aggregation_guidtogid')->alias('a')->field('guid')->join('__AGGREGATION_USER__ b on a.guid = b.id')->where($aggWhere)->count();
                    $html .= "首次付费用户:%s";
                    $appu = 0;
                    $payrate = 0;
                    $arppu = 0;
                    //$aggConsume
                    if($loginNum > 0 && $totalMoney > 0){
                        $appu = $totalMoney / $loginNum; // 游戏总收入/活跃用户
                    }
                    if($consumeNum > 0 && $loginNum > 0){
                        $payrate = $consumeNum/$loginNum; // 付费总数/活跃用户
                    }
                    if($consumeNum > 0 && $totalMoney > 0){
                        $arppu = round($totalMoney/$consumeNum,2);   //游戏总收入/ 付费总数
                    }
                    $saveWhere['type'] = $val['type'];
                    $saveWhere['uid'] = $val['uid'];
                    $saveWhere['gid'] = $val['gid'];
                    $saveWhere['aggid'] = $this->ysAggId;
                    $saveWhere['year'] = date('Y',$i);
                    $saveWhere['month'] = date('m',$i);
                    $saveWhere['day'] = date('d',$i);
                    $saveWhere['week'] = date('W',$i);
                    $data['new_users'] = $userNum;//
                    $data['new_activeusers'] = isset($loginNum) ? $loginNum :0;
                    $data['new_devices'] = $deviceNum;
                    $data['rate_2'] = 0;
                    $data['rate_7'] = 0;
                    $data['rate_30'] = 0;
                    $data['payrate'] = isset($payrate) ? $payrate : 0;
                    $data['payusers'] = isset($consumeNum) ? $consumeNum : 0;
                    $data['new_payusers'] = isset($aggConsume) ? $aggConsume : 0;
                    $data['paytotal'] = $totalMoney;
                    $data['new_paytotal'] = 0;
                    $data['ARPU'] =  isset($appu) ? $appu : 0;
                    $data['ARPPU'] = $arppu;
                    $data['create_time'] = strtotime(date('Y-m-d 00:00:05',$start));
                    $ret = D('Game/CronAggAnalysis')->where($saveWhere)->save($data);
                    if($ret === false){
                        echo "数据更新失败,查询条件:[uid:".$val['uid']."|gid:".$val['gid']."],错误原因:".D('Game/CronAggAnalysis')->getError();
                        file_put_contents('d:/wamp/www/php/game/Application/Game/'.ACTION_NAME.'-'.date('Y-m-d').'.txt',microDate("y-m-d H:i:s.x").' '."数据更新失败,查询条件:[uid:".$val['uid']."|gid:".$val['gid']."],错误原因:".D('Game/CronAggAnalysis')->getError()."\r\n",FILE_APPEND);
                    }else{
                        echo microDate("y-m-d H:i:s.x").' '."数据更新成功,查询条件:[uid:".$val['uid']."|gid:".$val['gid']."|aggid:1]\r\n";
                        echo microDate("y-m-d H:i:s.x").' '.sprintf($html,number_format($totalMoney/100,2),$consumeNum,$userNum,$loginNum,$deviceNum,$aggConsume)."\r\n";
                    }
                }

            }else{
                echo microDate("y-m-d H:i:s.x")." 验证失败..\r\n";
            }
        }
        $endMicroTime = microtime(true);
        $times = $endMicroTime - $startMicroTime;
        echo "脚本运行总时长:".$times;
    }
}