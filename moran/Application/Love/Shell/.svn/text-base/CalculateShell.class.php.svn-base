<?php
/*
 * 定时脚本,统计脚本,统计人数相关，订单相关信息
 * @author yyl
 * @email 944677073@qq.com
 * */
namespace Love\Shell;
use Love\Shell\Shell;

class CalculateShell extends Shell {
    private $time;
    private $star;
    private $end;
    private $cronLove;
    private $ysAggId = 1;
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->cronAggregation = D('Game/LoveAnalysis');
        //运行方式: php shell.php game/Calculate/CalculateAggRecord    &&  php shell.php game/Calculate/CalculateAggRecord/time/2017-01-01,2017-01-29
        $this->time = I('get.time');
        if(!empty($this->time)){
            if(strpos($this->time,',') === false){
                $this->star = strtotime($this->time);
                $this->end = strtotime(date('Y-m-d 23:59:59',strtotime($this->time)));
            }else{
                $time = explode(',',$this->time);
                $this->star = strtotime($time[0]);
                $this->end = strtotime($time[1].' 23:59:59');
            }
        }
    }
    /*
     *
     * CalculateUserInfo
     * 脚本功能说明：统计人的信息;
     * 添加 五分钟运行一次
     * 运行方法: php shell /User/Calculate/CalculateUserInfo
     * 调试方法: php shell /User/Calculate/CalculateUserInfo/time/2017-01-01
     *          php shell /User/Calculate/CalculateUserInfo/time/2017-01-01,2017-01-02
     * */
    public function CalculateUserInfo(){
        $startMicroTime = microtime(true);
        echo microDate("y-m-d H:i:s.x"). " 开始运行 付费统计 -> 纬度 数据...\r\n";
        if(intval(date('H',time())) === 2 ){
            $starTime = strtotime(date('Y-m-d',strtotime('-1 day')));
            $endTime = strtotime(date('Y-m-d 23:59:59',strtotime('-1 day')));
        }else{
            $starTime = ($this->star) ? $this->star : strtotime(date('Y-m-d 00:00:00',time()));
            $endTime = ($this->end) ? $this->end : time();
        }
        $confModel = D('Aggregation/Conf')->field('gid,uid,type')->where(array('status'=>1))->group('gid')->select();
        for($i = $starTime;$i <= $endTime;$i+=86400){
            $start = strtotime(date('Y-m-d 00:00:00',$i));//设置SQL条件查询的开始时间
            $end = strtotime(date('Y-m-d 23:59:59',$i));//设置SQL条件查询的结束时间
            echo microDate("y-m-d H:i:s.x"). " 开始验证 渠道配置 数据是否为空... \r\n";
            $html = '';
            if(!empty($confModel)){
                echo microDate("y-m-d H:i:s.x")." 开始循环 渠道配置 数据....\r\n";
                foreach($confModel as $key => $val){
                    $where['create_time'] = array('between',array($start,$end));
                    $where['uid'] = $val['uid'];
                    $where['type'] = $val['type'];
                    $where['gid'] = $val['gid'];
                    $where['status'] = 1;
                    //计算Love的总收入
                    $html =  "详细信息:".date('Y-m-d H:i:s',$start)." 至 ".date('Y-m-d H:i:s',$end);
                    $totalMoney = D('Aggregation/Pay')->field(array('SUM(total_money)'=>'sum_money'))->where($where)->find();
                    $totalMoney = isset($totalMoney['sum_money']) ? $totalMoney['sum_money'] : 0;
                    $html .= "  Love总收入:%s,";
                    //计算当前时间区间内总的付费用户数目开始
                    $consumeMoney = D('Aggregation/Pay')->field('guid')->where($where)->group('guid')->select();unset($where['status']);
                    $consumeNum = count($consumeMoney['guid']);//
                    $html .= "付费用户:%s,";

                    //计算新增用户 && 当前Love计算总用户数目
                    $userNum = D('Aggregation/User')->field(array('count(id)'=>'user_num'))->where($where)->find();
                    $userNum = isset($userNum['user_num']) ? $userNum['user_num'] : 0;
                    $html .= "新增用户:%s,";
                    unset($where['create_time']);
                    if(is_null($where['create_time']))
                        $where['login_time'] = array('between',array($start,$end));

                    //计算活跃用户 && 计算某个Love在某段时间注册的数量
                    $loginModel = D('Aggregation/LoginLog')->field('guid')->where($where)->group('guid')->select();
                    $loginNum = count($loginModel['guid']);
                    $html .= "活跃用户:%s,";
                    unset($where);
                    $dev['dev.create_time'] = array('between',array($start,$end));
                    $dev['user.uid'] = $val['uid'];
                    $dev['user.type'] = $val['type'];
                    $dev['user.gid'] = $val['gid'];
                    //计算某Love下，某段时间注册的人数
                    $deviceNum = D('Aggregation/User')->field(array('count(dev.id)'=>'device_num'))->alias('user')->join('__ADMIN_DEVICE__ dev on user.did = dev.id')->where($dev)->find();unset($dev);
                    $deviceNum = isset($deviceNum['device_num']) ? $deviceNum['device_num'] : 0;
                    $html .= "注册用户:%s,";
                    $aggWhere['a.create_time'] = array('between',array($start,$end));
                    $aggWhere['b.uid'] = $val['uid'];
                    $aggWhere['b.type'] = $val['type'];
                    $aggWhere['b.gid'] = $val['gid'];
                    //计算所有渠道的首次付费的用户人数
                    $aggConsume = M('aggregation_guidtogid')->alias('a')->field('guid')->join('__AGGREGATION_USER__ b on a.guid = b.id')->where($aggWhere)->count();
                    $html .= "首次付费用户:%s";
                    $appu = 0;
                    $payrate = 0;
                    $arppu = 0;
                    //$aggConsume
                    if($loginNum > 0 && $totalMoney > 0){
                        $appu = $totalMoney / $loginNum; // 游戏总收入/活跃用户
                    }
                    if($consumeNum > 0 && $loginNum > 0){
                        $payrate = $consumeNum/$loginNum; // 付费总数/活跃用户
                    }
                    if($consumeNum > 0 && $totalMoney > 0){
                        $arppu = round($totalMoney/$consumeNum,2);   //游戏总收入/ 付费总数
                    }
                    $saveWhere['type'] = $val['type'];
                    $saveWhere['uid'] = $val['uid'];
                    $saveWhere['gid'] = $val['gid'];
                    $saveWhere['aggid'] = 0;
                    $saveWhere['year'] = date('Y',$i);
                    $saveWhere['month'] = date('m',$i);
                    $saveWhere['day'] = date('d',$i);
                    $saveWhere['week'] = date('W',$i);
                    $data['new_users'] = $userNum;//
                    $data['new_activeusers'] = isset($loginNum) ? $loginNum :0;
                    $data['new_devices'] = $deviceNum;
                    $data['rate_2'] = 0;
                    $data['rate_7'] = 0;
                    $data['rate_30'] = 0;
                    $data['payrate'] = isset($payrate) ? $payrate : 0;
                    $data['payusers'] = isset($consumeNum) ? $consumeNum : 0;
                    $data['new_payusers'] = isset($aggConsume) ? $aggConsume : 0;
                    $data['paytotal'] = $totalMoney;
                    $data['new_paytotal'] = 0;
                    $data['ARPU'] =  isset($appu) ? $appu : 0;
                    $data['ARPPU'] = $arppu;
                    $data['create_time'] = strtotime(date('Y-m-d 00:00:05',$start));
                    $ret = D('Game/CronAggAnalysis')->where($saveWhere)->save($data);
                    if($ret === false){
                        echo "数据更新失败,查询条件:[uid:".$val['uid']."|gid:".$val['gid']."],错误原因:".D('Game/CronAggAnalysis')->getError();
                        file_put_contents('d:/wamp/www/php/game/Application/Game/'.ACTION_NAME.'-'.date('Y-m-d').'.txt',microDate("y-m-d H:i:s.x").' '."数据更新失败,查询条件:[uid:".$val['uid']."|gid:".$val['gid']."],错误原因:".D('Game/CronAggAnalysis')->getError()."\r\n",FILE_APPEND);
                    }else{
                        echo  microDate("y-m-d H:i:s.x").' '."数据更新成功,查询条件:[uid:".$val['uid']."|gid:".$val['gid']."]\r\n";
                        echo  microDate("y-m-d H:i:s.x").' '.sprintf($html,number_format($totalMoney/100,2),$consumeNum,$userNum,$loginNum,$deviceNum,$aggConsume)."\r\n";
                    }
                }

            }else{
                echo microDate("y-m-d H:i:s.x")." 验证失败..\r\n";
            }
        }
        $endMicroTime = microtime(true);
        $times = $endMicroTime - $startMicroTime;
        echo "脚本运行总时长:".$times;
    }
    /**
     * 统计绩效，当天男性用户注册的人数
     * 返回统计人数
     */
    public function calculateManLogin(){
        $Model = D('Admin/User');
        //昨天
        $map['a.create_time'] = array(array('EGT',strtotime(date('Y-m-d').' 00:00:00')),array('Elt',strtotime(date('Y-m-d').' 23:59:59')));
        //男性
        $map['b.gender'] = 1;
        $rel = $Model->field('a.username')->join('LEFT JOIN ___USER_FOLLOW__ as b on a.id = b.uid')->where($map)->select();
        foreach ($rel as $key => $value) {//生成数组
            $count_num[$value['username']] = $value['username'];
        }
        $count = count($count_num);
        unset($count_num);
        return isset($count)?:0;
    }
/**
 *
 *CalculateLiucun 统计男性人数次日留存,返回的数据34.4,就是34.4%
 * 计算那男性昨日留存
 */
public function CalculateLiucun(){
    //统计昨日留存
    $login_start = strtotime(date('Y-m-d'));//今天早晨
    $login_end = time();//到现在
    $reg_start  = $login_start - 86400;//注册的开始时间
    $reg_end =   strtotime(date('Y-m-d',$login_start)." 23:59:59");//注册的结束时间
    $model = D('Admin/User');
    $map['a.create_time'] = array(array('GT',$login_start),array('ELT',$reg_end));
    $map['b.gender'] = 1;
    $reg_user = $model->field('a.id,a.username')->join('LEFT JOIN ___LOVE_PERSON__ as b on a.id = b.uid')->where($map)->select();//昨天注册的人
    foreach ($reg_user as $key => $value) {
        $reg_arr[$value['id']] = $value['id'];
    }
    $reg_num = count($reg_arr);
    //计算登录的人数
    $model = D('User/LoginLog');
    $map['create_time'] = array(array('EGT',$login_start),array('ELT',$login_end));
    $log_user = $model->field('uid')->where($map)->select();//登录的人
    $count = 0;
    foreach ($log_user as $key => $value) {
       if ($reg_arr[$value['uid']]) {//昨天注册的，今天登录的
          $count++;
       }
    }
    //计算留存
     return  round($count/$reg_num,4)*100;
    }
/**
 * [CalculateRemain 计算除掉今日，昨天注册的，之前注册的男性登录人数]
 * 计算历史注册男性用户，今天登陆人数,返回的数据34.4,就是34.4%
 */
public function CalculateRemain(){
    //统计昨日留存
    $login_start = strtotime(date('Y-m-d'));//今天早晨
    $login_end = time();//到现在
    $reg_end  = $login_start - 86400;//注册的结束时间
    $model = D('Admin/User');
    $map['a.create_time'] = array('LT',$reg_end);//之前注册的
    $map['b.gender'] = 1;
    $reg_user = $model->field('a.id,a.username')->join('LEFT JOIN ___LOVE_PERSON__ as b on a.id = b.uid')->where($map)->select();//历史注册的人
    foreach ($reg_user as $key => $value) {
        $reg_arr[$value['id']] = $value['id'];
    }
    $reg_num = count($reg_arr);
    //计算登录的人数
    $model = D('User/LoginLog');
    $map['create_time'] = array(array('EGT',$login_start),array('ELT',$login_end));
    $log_user = $model->field('uid')->where($map)->select();//登录的人
    $count = 0;
    foreach ($log_user as $key => $value) {
       if ($reg_arr[$value['uid']]) {//昨天注册的，今天登录的
          $count++;
       }
    }
    //计算留存
     return  round($count/$reg_num,4)*100;
}
/**
 * [CalculateEff 计算绩效，统计当天注册全部人数中的男性人数，ge:23.4,就是男性占比23.4%]
 */
public function CalculateEff(){
    $login_start =  strtotime(date('Y-m-d'));//开始时间
    $login_end = time();//结束时间
    $model = D('User/User');
    $map['a.create_time'] = array(array('EGT',$login_start),array('ELT',$login_end));
    $reg_user = $model->field('a.id,a.username,b.gender')->join('LEFT JOIN ___LOVE_PERSON__ as b on a.id = b.uid')->where($map)->select();//历史注册的人
    $total = 0;$male = 0;
    foreach ($reg_user as $key => $value) {
       if ($value['gender']) {
           $male++;
       }
       $total++;
    }
    //计算男性百分比
    return round($male/$total,4)*100;
}
/**
 * [CalculateTotalMoney 计算今天所有付费成功的人数]
 * 返回今天所有付费成功金额总和
 */
public function CalculateTotalMoney(){
    $login_start =  strtotime(date('Y-m-d'));//开始时间
    $login_end = time();//结束时间
    $model = D('Love/Pay');
    $map['create_time'] = array(array('EGT',$login_start),array('ELT',$login_end));//今天支付
    $map['status'] = 1;//付费成功
    $pay_result = $model->field('SUM(amount) as totalmoney')->where($map)->select();
    return $pay_result[0]['totalmoney'];
}
/**
 * [CalculateRegTotalMoney 计算今天注册用户总收入]
 */
public function CalculateRegTotalMoney(){
    $login_start =  strtotime(date('Y-m-d'));//开始时间
    $login_end = time();//结束时间
    $model = D('Admin/User');
    $map['create_time'] = array(array('EGT',$login_start),array('ELT',$login_end));//今天注册
    $reg_user = $model->field('id,username')->$map($map)->select();
    foreach ($reg_user as $key => $value) {
        $user_arr[$value['id']] = $value['id'];
    }
    $model = D('Love/Pay');
    $map['create_time'] = array(array('EGT',$login_start),array('ELT',$login_end));//今天支付
    $pay_result = $model->field('uid,amount')->where($map)->select();
    $total_money = 0;
    foreach ($pay_result as $key => $value) {
        if ($user_arr[$value['uid']]) {
            $total_money += $value['amount'];
        }
    }
    return $total_money;//返回钱数
    // return money_format($total_money,1);//如果为分
}
/**
 * [getActiveUsers 获取用户激活之后注册的百分比,数据来源admin_device,用户访问就是激活，就存在记录，注册之后会在admin_user表中存在记录]
 * 返回数据类型 34.5，即激活百分比是34.5
 * @return [type] [description]
 */
public function CalculateActiveUsers(){
    $login_start =  strtotime(date('Y-m-d'));//开始时间
    $login_end = time();//结束时间
    $model = D('Admin/Device');
    $map['create_time'] = array(array('EGT',$login_start),array('ELT',$login_end));//今天激活
    $device_info = $model->field('id')->where($map)->select();
    foreach ($device_info as $key => $value) {
       $device_arr[$value['id']] = $value['id'];
    }
    $reg_device_num = count($device_arr);//激活人数，用户点击图标之后就会返回设备信息
    $model = D('Admin/User');
    $map['create_time'] = array(array('EGT',$login_start),array('ELT',$login_end));//今天注册
    $map['if_reged'] = 1;//今天注册,默认为0
    $user_info = $model->field('did')->where($map)->select();
    foreach ($user_info as $key => $value) {
        if (isset($device_arr[$value['did']])) {//注册人数
           $loginNum ++;
        }
    }
    unset($device_arr);
    $log_rate = isset($loginNum)?(round($loginNum/$reg_device_num,4)*100):0.0;
    return array('active_num' => $reg_device_num,'login_num'=>$loginNum, 'log_rate'=>$log_rate);//存在注册则变成：34.5，即34.5%，不存在则是0.0
}
/**
 * [CalculatePayType 统计用户支付成功各个类型的次数]
 * array('pay_type'=>10,'pay_type'=>12);返回数据类型，键:支付类型;值:支付次数;
 */
public function CalculatePayType(){
    $login_start =  strtotime(date('Y-m-d'));//开始时间
    $login_end = time();//结束时间
    //返回数组，然后json_encode
    $model = D('Love/Pay');
    $map['create_time'] = array(array('EGT',$login_start),array('ELT',$login_end));//今天注册
    $map['status'] = 1;//支付成功
    $fields = 'a.pay_type,count(id) as num,a.channel_type';
    $pay_type = $model->alias('a')
                ->field($fields)
                ->where($map)
                ->select();
   $i = 1;
   foreach ($pay_type as $key => $value) {
       $result[$value['pay_type']] = $value['num'];
   }
   return $result;//返回支付类型的数组
}
/**
 * [CalculateInterceptionTimes 即当日因查看资料，回复信息产生的总付费拦截次数除以当日所有用户的数量]
 */
public function CalculateInterceptionTimes(){

}
/**
 * [CalculateMsgNum 计算今天男性用户发送和接收的信息条数]
 */
public function CalculateMsgSendNum(){
    $login_start =  strtotime(date('Y-m-d'));//开始时间
    $login_end = time();//结束时间
    $model = D('Love/Talk');
    $map['a.create_time'] = array(array('EGT',$login_start),array('ELT',$login_end));//今天发送消息
    $map['b.gender'] = 1;//男性
    $talk_send = $model->field('sum(a.id) as send_num')->join('LEFT JOIN __LOVE_TALK__ as b on a.from_uid = b.uid')->where($map)->select();
    $talk_receive = $model->field('sum(a.id) as receive_num')->join('LEFT JOIN __LOVE_TALK__ as b on a.to_uid = b.uid')->where($map)->select();
    return array('send_num' => $talk_send[0]['send_num'],'receive_num'=>$talk_receive[0]['receive_num']);
}

/**
 * [CalculateVipPost 计算选择会员套餐，并提交和提交成功的人数,订单成功的百分比]
 */
public function CalculateVipPost(){
    $login_start =  strtotime(date('Y-m-d'));//开始时间
    $login_end = time();//结束时间
    $model = D('Love/Vip');
    $map['a.create_time'] = array(array('EGT',$login_start),array('ELT',$login_end));//今天发送选择套餐
    // $map['status'] = 1;//提交
    $post_vip = $model->field('uid')->where($map)->select();
    foreach ($post_vip as $key => $value) {
        $post_arr[$value['uid']] = $value['uid'];
    }
    $order_num = count($post_arr);//提交订单的人数
    $map['status'] = 2;//提交成功
    $post_success = $model->field('uid')->where($map)->select();
    foreach ($post_success as $key => $value) {
        $success_arr[$value['uid']] = $value['uid'];
    }
    $order_success_num = count($success_arr);//订单成功的人数
    return array('order_num' => $order_num,'order_success_num' => $order_success_num,'order_rate'=>round($order_success_num/$order_num,4)*100);//返回订单数和订单成功数
}

    /*
     * 5 * * * * CalculateOrderInfo
     * 脚本功能说明：统计支付信息;
     * 聚合统计 五分钟运行一次
     * 运行方法: php shell /User/Calculate/CalculateOrderInfo
     * 调试方法: php shell /User/Calculate/CalculateOrderInfo/time/2017-01-01
     *          php shell /User/Calculate/CalculateOrderInfo/time/2017-01-01,2017-01-02
     * */
    public function CalculateOrderInfo(){
        $startMicroTime = microtime(true);
        echo microDate("y-m-d H:i:s.x"). " 开始运行 聚合统计 -> 渠道纬度 数据...\r\n";
        if(intval(date('H',time())) === 2 ){
            $starTime = strtotime(date('Y-m-d',strtotime('-1 day')));
            $endTime = strtotime(date('Y-m-d 23:59:59',strtotime('-1 day')));
        }else{
            $starTime = ($this->star) ? $this->star : strtotime(date('Y-m-d 00:00:00',time()));
            $endTime = ($this->end) ? $this->end : time();
        }
        $confModel = D('Aggregation/Conf')->field('gid,uid,type,aggid')->where(array('status'=>1))->select();
        for($i = $starTime;$i <= $endTime;$i+=86400){
            $start = strtotime(date('Y-m-d 00:00:00',$i));//设置SQL条件查询的开始时间
            $end = strtotime(date('Y-m-d 23:59:59',$i));//设置SQL条件查询的结束时间
            echo microDate("y-m-d H:i:s.x"). " 开始验证 渠道配置 数据是否为空... \r\n";
            $html = '';
            if(!empty($confModel)){
                echo microDate("y-m-d H:i:s.x")." 开始循环 渠道配置 数据....\r\n";
                foreach($confModel as $key => $val){
                    $where['create_time'] = array('between',array($start,$end));
                    $where['uid'] = $val['uid'];
                    $where['type'] = $val['type'];
                    $where['gid'] = $val['gid'];
                    $where['aggid'] = $val['aggid'];
                    $where['status'] = 1;
                    //计算游戏的总收入
                    $html =  "详细信息:".date('Y-m-d H:i:s',$start)." 至 ".date('Y-m-d H:i:s',$end);
                    $totalMoney = D('Aggregation/Pay')->field(array('SUM(total_money)'=>'sum_money'))->where($where)->find();
                    $totalMoney = isset($totalMoney['sum_money']) ? $totalMoney['sum_money'] : 0;
                    $html .= "  游戏总收入:%s,";
                    //计算当前时间区间内总的付费用户数目开始
                    $consumeMoney = D('Aggregation/Pay')->field('guid')->where($where)->group('guid')->select();
                    $consumeNum = count($consumeMoney['guid']);unset($where['status']);//下面的sql使用相同的条件。单不需要status,节省不必要的代码
                    $html .= "付费用户:%s,";

                    //计算新增用户 && 当前游戏计算总用户数目
                    $userNum = D('Aggregation/User')->field(array('count(id)'=>'user_num'))->where($where)->find();
                    $userNum = isset($userNum['user_num']) ? $userNum['user_num'] : 0;
                    $html .= "新增用户:%s,";
                    unset($where['create_time']);
                    if(is_null($where['create_time']))
                        $where['login_time'] = array('between',array($start,$end));

                    //计算活跃用户 && 计算某个游戏在某段时间注册的数量
                    $loginModel = D('Aggregation/LoginLog')->field('guid')->where($where)->group('guid')->select();
                    $loginNum = count($loginModel['guid']);
                    $html .= "活跃用户:%s,";
                    unset($where);
                    $dev['dev.create_time'] = array('between',array($start,$end));
                    $dev['user.uid'] = $val['uid'];
                    $dev['user.type'] = $val['type'];
                    $dev['user.gid'] = $val['gid'];
                    $dev['user.aggid'] = $val['aggid'];
                    //计算某款游戏下，某段时间注册的人数
                    $deviceNum = D('Aggregation/User')->field(array('count(dev.id)'=>'device_num'))->alias('user')->join('__ADMIN_DEVICE__ dev on user.did = dev.id')->where($dev)->find();unset($dev);
                    $deviceNum = isset($deviceNum['device_num']) ? $deviceNum['device_num'] : 0;
                    $html .= "注册用户:%s,";
                    $aggWhere['a.create_time'] = array('between',array($start,$end));
                    $aggWhere['b.uid'] = $val['uid'];
                    $aggWhere['b.type'] = $val['type'];
                    $aggWhere['b.gid'] = $val['gid'];
                    $aggWhere['b.aggid'] = $val['aggid'];
                    //计算所有渠道的首次付费的用户人数
                    $aggConsume = M('aggregation_guidtogid')->alias('a')->field('guid')->join('__AGGREGATION_USER__ b on a.guid = b.id')->where($aggWhere)->count();
                    $html .= "首次付费用户:%s";
                    $appu = 0;
                    $payrate = 0;
                    $arppu = 0;
                    //$aggConsume
                    if($loginNum > 0 && $totalMoney > 0){
                        $appu = $totalMoney / $loginNum; // 游戏总收入/活跃用户
                    }
                    if($consumeNum > 0 && $loginNum > 0){
                        $payrate = $consumeNum/$loginNum; // 付费总数/活跃用户
                    }
                    if($consumeNum > 0 && $totalMoney > 0){
                        $arppu = round($totalMoney/$consumeNum,2);   //游戏总收入/ 付费总数
                    }
                    $saveWhere['type'] = $val['type'];
                    $saveWhere['uid'] = $val['uid'];
                    $saveWhere['gid'] = $val['gid'];
                    $saveWhere['aggid'] = $val['aggid'];
                    $saveWhere['year'] = date('Y',$i);
                    $saveWhere['month'] = date('m',$i);
                    $saveWhere['day'] = date('d',$i);
                    $saveWhere['week'] = date('W',$i);
                    $data['new_users'] = $userNum;//
                    $data['new_activeusers'] = isset($loginNum) ? $loginNum :0;
                    $data['new_devices'] = $deviceNum;
                    $data['rate_2'] = 0;
                    $data['rate_7'] = 0;
                    $data['rate_30'] = 0;
                    $data['payrate'] = isset($payrate) ? $payrate : 0;
                    $data['payusers'] = isset($consumeNum) ? $consumeNum : 0;
                    $data['new_payusers'] = isset($aggConsume) ? $aggConsume : 0;
                    $data['paytotal'] = $totalMoney;
                    $data['new_paytotal'] = 0;
                    $data['ARPU'] =  isset($appu) ? $appu : 0;
                    $data['ARPPU'] = $arppu;
                    $data['create_time'] = strtotime(date('Y-m-d 00:00:05',$start));
                    $ret = D('Game/CronAggAnalysis')->where($saveWhere)->save($data);
                    if($ret === false){
                        echo "数据更新失败,查询条件:[uid:".$val['uid']."|gid:".$val['gid']."],错误原因:".D('Game/CronAggAnalysis')->getError();
                        file_put_contents('d:/wamp/www/php/game/Application/Game/'.ACTION_NAME.'-'.date('Y-m-d').'.txt',microDate("y-m-d H:i:s.x").' '."数据更新失败,查询条件:[uid:".$val['uid']."|gid:".$val['gid']."],错误原因:".D('Game/CronAggAnalysis')->getError()."\r\n",FILE_APPEND);
                    }else{
                        echo microDate("y-m-d H:i:s.x").' '."数据更新成功,查询条件:[uid:".$val['uid']."|gid:".$val['gid']."|aggid:".$val['aggid']."]\r\n";
                        echo microDate("y-m-d H:i:s.x").' '.sprintf($html,number_format($totalMoney/100,2),$consumeNum,$userNum,$loginNum,$deviceNum,$aggConsume)."\r\n";
                    }
                }

            }else{
                echo microDate("y-m-d H:i:s.x")." 验证失败..\r\n";
            }
        }
        $endMicroTime = microtime(true);
        $times = $endMicroTime - $startMicroTime;
        echo "脚本运行总时长:".$times;
    }

    /*
     * 5 * * * * gameanalysisforthirduserevery5min
     * 脚本功能说明：聚合模块渠道游戏维度统计;  勇士互娱数据
     * 聚合统计 ->渠道纬度  勇士互娱数据 五分钟运行一次
     * 运行方法: php shell /Aggregation/Calculate/CalculateYsAggRecord
     * 调试方法: php shell /Aggregation/Calculate/CalculateYsAggRecord/time/2017-01-01
     *          php shell /Aggregation/Calculate/CalculateYsAggRecord/time/2017-01-01,2017-01-02
     * */
    public function CalculateYsAggRecord(){
        $startMicroTime = microtime(true);
        echo microDate("y-m-d H:i:s.x"). " 开始运行 聚合统计 -> 渠道纬度 勇士互娱 数据...\r\n";
        if(intval(date('H',time())) === 2 ){
            $starTime = strtotime(date('Y-m-d',strtotime('-1 day')));
            $endTime = strtotime(date('Y-m-d 23:59:59',strtotime('-1 day')));
        }else{
            $starTime = ($this->star) ? $this->star : strtotime(date('Y-m-d 00:00:00',time()));
            $endTime = ($this->end) ? $this->end : time();
        }
        $confModel = D('Aggregation/Conf')->field('gid,uid,type,aggid')->where(array('status'=>1))->select();
        for($i = $starTime;$i <= $endTime;$i+=86400){
            $start = strtotime(date('Y-m-d 00:00:00',$i));//设置SQL条件查询的开始时间
            $end = strtotime(date('Y-m-d 23:59:59',$i));//设置SQL条件查询的结束时间
            echo microDate("y-m-d H:i:s.x"). " 开始验证 渠道配置 数据是否为空... \r\n";
            $html = '';
            if(!empty($confModel)){
                echo microDate("y-m-d H:i:s.x")." 开始循环 渠道配置 数据....\r\n";
                foreach($confModel as $key => $val){
                    $where['create_time'] = array('between',array($start,$end));
                    $where['uid'] = $val['uid'];
                    $where['type'] = $val['type'];
                    $where['gid'] = $val['gid'];
                    $where['aggid'] = $this->ysAggId;
                    $where['status'] = 1;
                    //计算游戏的总收入
                    $html =  "详细信息:".date('Y-m-d H:i:s',$start)." 至 ".date('Y-m-d H:i:s',$end);
                    $totalMoney = D('Aggregation/Pay')->field(array('SUM(total_money)'=>'sum_money'))->where($where)->find();
                    $totalMoney = isset($totalMoney['sum_money']) ? $totalMoney['sum_money'] : 0;
                    $html .= "  游戏总收入:%s,";
                    //计算当前时间区间内总的付费用户数目开始
                    $consumeMoney = D('Aggregation/Pay')->field('guid')->where($where)->group('guid')->select();unset($where['status']);
                    $consumeNum = count($consumeMoney['guid']);//
                    $html .= "付费用户:%s,";

                    //计算新增用户 && 当前游戏计算总用户数目
                    $userNum = D('Aggregation/User')->field(array('count(id)'=>'user_num'))->where($where)->find();
                    $userNum = isset($userNum['user_num']) ? $userNum['user_num'] : 0;
                    $html .= "新增用户:%s,";
                    unset($where['create_time']);
                    if(is_null($where['create_time']))
                        $where['login_time'] = array('between',array($start,$end));

                    //计算活跃用户 && 计算某个游戏在某段时间注册的数量
                    $loginModel = D('Aggregation/LoginLog')->field('guid')->where($where)->group('guid')->select();
                    $loginNum = count($loginModel['guid']);
                    $html .= "活跃用户:%s,";
                    unset($where);
                    $dev['dev.create_time'] = array('between',array($start,$end));
                    $dev['user.uid'] = $val['uid'];
                    $dev['user.type'] = $val['type'];
                    $dev['user.gid'] = $val['gid'];
                    $dev['user.aggid'] = $this->ysAggId;
                    //计算某款游戏下，某段时间注册的人数
                    $deviceNum = D('Aggregation/User')->field(array('count(dev.id)'=>'device_num'))->alias('user')->join('__ADMIN_DEVICE__ dev on user.did = dev.id')->where($dev)->find();unset($dev);
                    $deviceNum = isset($deviceNum['device_num']) ? $deviceNum['device_num'] : 0;
                    $html .= "注册用户:%s,";
                    $aggWhere['a.create_time'] = array('between',array($start,$end));
                    $aggWhere['b.uid'] = $val['uid'];
                    $aggWhere['b.type'] = $val['type'];
                    $aggWhere['b.gid'] = $val['gid'];
                    $aggWhere['b.aggid'] = $this->ysAggId;
                    //计算所有渠道的首次付费的用户人数
                    $aggConsume = M('aggregation_guidtogid')->alias('a')->field('guid')->join('__AGGREGATION_USER__ b on a.guid = b.id')->where($aggWhere)->count();
                    $html .= "首次付费用户:%s";
                    $appu = 0;
                    $payrate = 0;
                    $arppu = 0;
                    //$aggConsume
                    if($loginNum > 0 && $totalMoney > 0){
                        $appu = $totalMoney / $loginNum; // 游戏总收入/活跃用户
                    }
                    if($consumeNum > 0 && $loginNum > 0){
                        $payrate = $consumeNum/$loginNum; // 付费总数/活跃用户
                    }
                    if($consumeNum > 0 && $totalMoney > 0){
                        $arppu = round($totalMoney/$consumeNum,2);   //游戏总收入/ 付费总数
                    }
                    $saveWhere['type'] = $val['type'];
                    $saveWhere['uid'] = $val['uid'];
                    $saveWhere['gid'] = $val['gid'];
                    $saveWhere['aggid'] = $this->ysAggId;
                    $saveWhere['year'] = date('Y',$i);
                    $saveWhere['month'] = date('m',$i);
                    $saveWhere['day'] = date('d',$i);
                    $saveWhere['week'] = date('W',$i);
                    $data['new_users'] = $userNum;//
                    $data['new_activeusers'] = isset($loginNum) ? $loginNum :0;
                    $data['new_devices'] = $deviceNum;
                    $data['rate_2'] = 0;
                    $data['rate_7'] = 0;
                    $data['rate_30'] = 0;
                    $data['payrate'] = isset($payrate) ? $payrate : 0;
                    $data['payusers'] = isset($consumeNum) ? $consumeNum : 0;
                    $data['new_payusers'] = isset($aggConsume) ? $aggConsume : 0;
                    $data['paytotal'] = $totalMoney;
                    $data['new_paytotal'] = 0;
                    $data['ARPU'] =  isset($appu) ? $appu : 0;
                    $data['ARPPU'] = $arppu;
                    $data['create_time'] = strtotime(date('Y-m-d 00:00:05',$start));
                    $ret = D('Game/CronAggAnalysis')->where($saveWhere)->save($data);
                    if($ret === false){
                        echo "数据更新失败,查询条件:[uid:".$val['uid']."|gid:".$val['gid']."],错误原因:".D('Game/CronAggAnalysis')->getError();
                        file_put_contents('d:/wamp/www/php/game/Application/Game/'.ACTION_NAME.'-'.date('Y-m-d').'.txt',microDate("y-m-d H:i:s.x").' '."数据更新失败,查询条件:[uid:".$val['uid']."|gid:".$val['gid']."],错误原因:".D('Game/CronAggAnalysis')->getError()."\r\n",FILE_APPEND);
                    }else{
                        echo microDate("y-m-d H:i:s.x").' '."数据更新成功,查询条件:[uid:".$val['uid']."|gid:".$val['gid']."|aggid:1]\r\n";
                        echo microDate("y-m-d H:i:s.x").' '.sprintf($html,number_format($totalMoney/100,2),$consumeNum,$userNum,$loginNum,$deviceNum,$aggConsume)."\r\n";
                    }
                }

            }else{
                echo microDate("y-m-d H:i:s.x")." 验证失败..\r\n";
            }
        }
        $endMicroTime = microtime(true);
        $times = $endMicroTime - $startMicroTime;
        echo "脚本运行总时长:".$times;
    }
}